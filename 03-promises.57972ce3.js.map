{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,wBAIA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASC,cAAc,SAmCpC,SAASE,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CbN,EAAKc,MAAMC,iBAAkB,EAAAjB,EAAAkB,qBAE7Bb,EAAKc,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAQb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAC9CC,EAAaC,OAAON,EAAMO,OAC1BC,EAAYF,OAAOL,EAAKM,OACxBE,EAAcH,OAAOJ,EAAOK,OAElC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACF1B,EAAc0B,EAAUL,GACrBM,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,OACjB,EAAAR,EAAAkC,oBAAmB,uBAAqB3B,QAAiBC,MAAU,IAEpE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,OAClB,EAAAR,EAAAoC,mBAAkB,sBAAoB7B,QAAiBC,MAAU,IAGrEF,EAAc0B,EAAUL,EAAaG,GAAaE,EAAW,IAC1DC,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,OACjB,EAAAR,EAAAkC,oBAAmB,uBAAqB3B,QAAiBC,MAAU,IAEpE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,OAClB,EAAAR,EAAAoC,mBAAkB,sBAAoB7B,QAAeC,MAAU,IAGrEH,EAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { showSuccessMessage } from './functions';\nimport { showFailorMessage } from './functions';\nimport { getRandomHexColor } from './functions';\n\nconst body = document.querySelector('body');\nconst form = document.querySelector('.form');\n\nbody.style.backgroundColor = getRandomHexColor();\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.currentTarget.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue)\n        .then(({ position, delay }) => {\n          showSuccessMessage(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          showFailorMessage(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    } else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          showSuccessMessage(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          showFailorMessage(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n    form.reset();\n  }\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$gXu43","parcelRequire","$47d4ff9957288465$var$body","document","querySelector","$47d4ff9957288465$var$form","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","style","backgroundColor","getRandomHexColor","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","delayValue","Number","value","stepValue","amountValue","position1","then","showSuccessMessage","catch","showFailorMessage","reset"],"version":3,"file":"03-promises.57972ce3.js.map"}